import pygubu
import time
import tkinter as tk
from tkinter import messagebox, ttk
import secure_reddit as sr
import parsing
import user
from base64 import b64encode, b64decode

# This is the main file of the project.
# It uses an XML generated by pygubu to build a GUI.

class Application:
	def __init__(self, master, client):
		master.title(client.username);

		self.master = master
		self.client = client
		#1: Create a builder
		self.builder = builder = pygubu.Builder()

		#2: Load an ui file
		builder.add_from_file('gui.ui')

		#3: Create the mainwindow
		self.mainwindow = builder.get_object('mainwindow',master)

		builder.connect_callbacks(self)

		self.groups_choice =  builder.get_object('groupsChoice',master)
		self.users_list = builder.get_object('userslist',master)
		self.text_box = builder.get_object('textbox',master)
		self.groupname = builder.get_object('groupname',master)
		self.username = builder.get_object('username',master)
		self.decryptText = builder.get_object('decryptText',master)
		self.scrollbar = builder.get_object('scrollbar',master)
		self.decryptText['yscrollcommand'] = self.scrollbar.set
		self.scrollbar['command'] = self.decryptText.yview

		# see if public key is set up
		my_key_t =  sr.get_public_key(client.reddit, client.username)
		user_key = parsing.parse_public_key(my_key_t)
		key = parsing.get_priv_key(client)
		print(user_key)
		if user_key is not None:
			pub_key = key.publickey().export_key();
			pk = pub_key
			print(pk)
			if pk == user_key:
				print("equal")
				label = builder.get_object('pubkeyLabel',self.master)
				label.configure(text=repr('Public key set up!'))


	def on_add_button_clicked(self):
		self.client.groups.add_user(self.username.get(), self.groupname.get())
		self.client.groups.flush()

	def on_remove_button_clicked(self):
		self.client.groups.remove_user(self.username.get(), self.groupname.get())
		self.client.groups.flush()

	# Button to generate and publish public key.
	def on_pubkeygen_button_clicked(self):
		label = self.builder.get_object('pubkeyLabel',self.master)
		label.configure(text=repr('Public key set up!'))
		sr.update_public_key(self.client);

	def on_send_button_clicked(self):
		label = self.builder.get_object('sendlabel')
		label.configure(text=repr('Sent!'))
		msg = self.text_box.get(1.0,tk.END);
		gname  = self.groups_choice.get();
		print(self.text_box.get(1.0,tk.END))
		sr.submit_secure(client,'test','praw test',msg, gname);

	def on_msgrefresh_button_clicked(self):
		self.decryptText.configure(state="normal")
		self.decryptText.delete(1.0, tk.END)
		posts = []
		for post in sr.get_my_posts(client):
			print(post)
			posts.append("%s \n" % (post))
		text = ''.join(posts)
		self.decryptText.insert(1.0, text)
		self.decryptText.configure(state="disabled")
	
	# Display all the groups available.
	def load_in_choices(self):
		print("choices")
		print(self.client.groups.groups.keys())
		self.groups_choice['values'] = list(self.client.groups.groups.keys())

	# Display the users in the group chosen.
	def group_callback(self, event):
		value  = self.groups_choice.get()
		print(value)
		self.users_list['values'] = self.client.groups.get_users(value)

# mainline
if __name__ == "__main__":
	root = tk.Tk();
	client = sr.setup_client()
	app = Application(root, client)
	root.mainloop();

